---
title: "Intersectional climate justice perspective: The case of extreme heat in Erie County, NY"
author: "Enoch Yeleliere"
output: 
  github_document: default
  html_document: default
  pdf_document: default
date: 12/13/2024
code_folding: hide
---

# 1.0 Introduction

The rise in global temperatures above pre-industrial levels, combined with rapid urbanization projected to exceed 70% by 2050 (UN DESA, 2018), is expected to escalate greenhouse gas emissions and significantly intensify the Urban Heat Effect (UHE) (Jung et al., 2024). The UHE phenomenon has made summers increasingly unbearable, particularly in parts of the United States, with profound socio-ecological impacts. These include negative health effects, such as respiratory and cardiovascular issues, and increased energy consumption due to the growing reliance on air conditioning to mitigate heat risks. The UHE also disrupts ecological and economic cycles, further exacerbating the challenges faced by urban areas. Heatwaves not only contribute to health complications but also degrade urban environmental quality, diminishing the overall quality of life for residents (Li et al., 2019).

These concerns are compounded by rapid urbanization, escalating extreme weather events, and the diminishing availability of green infrastructure, all of which are projected to amplify the magnitude and severity of the UHE (Chen, 2024). The unequal distribution of the impacts of UHE across different spatial scales, particularly in marginalized communities, has raised concerns about environmental and climate justice (Heck, 2021; Mitchell and Chakraborty, 2014). In addition, the quest for cooling systems in households to mitigate heat effects introduces further disparities. Vulnerable groups often face difficulties accessing such cooling systems, contributing to a 19% increase in energy consumption, which drives up electricity costs for residents (Li et al., 2019). This underscores the urgent need to address these disparities through urban climate action planning that takes into account inequalities, particularly in the distribution of urban heat.

Urban areas with limited green infrastructure (UGI) or vegetation cover are particularly susceptible to heat risks, as the lack of green spaces correlates with poor air quality and reduced cooling effects (Chen, 2024; Wilby, 2008). While much research has focused on the Urban Heat Island (UHI) effect, often through a climate or environmental justice lens, fewer studies have adopted an intersectional approach that considers multiple factors, such as surface temperature, socio-demographic characteristics, and the presence of UGI. An intersectional approach helps to better understand how vulnerability to heat risks varies across different communities.

This perspective is particularly relevant given the history of systemic discrimination in U.S. cities, where practices like redlining have reduced green infrastructure in minority neighborhoods, exacerbating racial segregation and intensifying heat vulnerability. In light of these issues, the study aims to answer the following research questions:

i). What are the spatial patterns of heat risk in Erie County, New York?
ii) Which areas in Erie County are hotspots for the Urban Heat Effect?
iii). How do socio-demographic, economic, and spatial factors intersect to shape the vulnerability of different groups to heat risks?

# 2.0 Materials and methods

To address the three research questions, I used remote sensing and exploratory spatial data science techniques. First, I obtained satellite imagery from Landsat 8 Collection 2, Level 1, taken in November 2024, from the United States Geological Survey (USGS) via the EarthExplorer platform (<https://earthexplorer.usgs.gov/>). The choice of Landsat data was driven by its higher resolution compared to other available datasets, making it more suitable for this type of analysis. This satellite data was used to estimate key indices such as Land Surface Temperature (LST), Normalized Difference Vegetation Index (NDVI), Normalized Difference Built-up Index (NDBI), and the Urban Heat Risk Index (UHRI) in Erie County.

The UHRI is mathematically expressed as:
UHRI = (LST + NDBI)-NDVI           (Mitchell and Chakraborty, 2015). 

In this equation, the NDBI represents the built environment features of urban areas, ranging from non-urbanized forms (-1) to highly urbanized forms (+1). The NDVI, which reflects vegetative cover in urban areas, ranges from minimal vegetation (-1) to abundant vegetation (+1). I calculated the mean values of LST, NDVI, and NDBI, which were then used to create spatial maps for analysis.

To explore intersectionality, the study incorporated socioeconomic data on variables that identify minority populations and/or vulnerable groups in Erie County. These variables included race, median income, and age, sourced from the 5-year estimates of the American Community Survey (ACS), provided by the U.S. Census Bureau (<https://www.census.gov/>).

Key step:
Download data
Prepare, clean, and process data
Visualize data and
Conduct analysis

To answer the study objectives, the following procedure was followed and executed:

## Load packages that are need to conduct this analysis (NB. All the packages are already installed from prior works):

```{r, message=F, warning=F}
# Load necessary libraries
library(tidyverse)   # For data manipulation
library(tidycensus)  # For working with US Census data
library(leaflet)     # For interactive maps
library(dplyr)       # For data manipulation (redundant with tidyverse)
library(terra)       # For raster data manipulation
library(sf)          # For spatial data manipulation
library(ggplot2)     # For data visualization (ggplot2 plots)
library(rasterVis)   # For raster visualization
library(raster)      # For raster data manipulation

```



## Download, clean, and process data (Landsat 8 collective 2 level 1)

```{r}
# Key Steps

# Load Erie County shapefile 
erie_shapefile <- "data/erie.shp"  # Path to Erie County shapefile
erie_county <- st_read(erie_shapefile)  # Read the shapefile as an sf object

# Load Landsat 8 raster files 
tif_files <- list.files("data", pattern = "\\.TIF$", full.names = TRUE)  # List all TIF files in the 'data' folder

# Load the rasters using terra::rast
rasters <- lapply(tif_files, rast)  # Load all TIF files as raster objects using terra::rast

# Check the extents, resolutions, and CRS of each raster
extents <- lapply(rasters, ext)  # Get the spatial extent of each raster
resolutions <- lapply(rasters, res)  # Get the resolution of each raster
crs_list <- lapply(rasters, crs)  # Get the coordinate reference system (CRS) of each raster

#Find the common extent by intersecting the extents of all rasters
common_extent <- Reduce(intersect, extents)  # Compute the intersection of all raster extents to find the common extent

# Print the common extent for verification
print(common_extent)

# Find the common resolution
common_res <- res(rasters[[1]])  # Use the resolution of the first raster as the common resolution

# Ensure the same CRS for all rasters
reference_crs <- crs(rasters[[1]])  # Set the CRS of the first raster as the reference CRS

# Reproject rasters as their CRS does not match the reference CRS
rasters <- lapply(rasters, function(r) {
  if (!identical(crs(r), reference_crs)) {
    project(r, reference_crs)  # Reproject raster to the reference CRS
  } else {
    r  # If the CRS is already the same, return the raster without change
  }
})

#Crop and resample the rasters to the common extent and resolution
rasters_aligned <- lapply(rasters, function(r) {
  r_resampled <- resample(crop(r, common_extent),  # Crop raster to the common extent and then resample
                          rast(extent = common_extent, res = common_res, crs = reference_crs))  # Define common resolution and CRS
  return(r_resampled)
})

#Create a raster stack from the aligned rasters
raster_stack <- rast(rasters_aligned)  # Combine all aligned rasters into a raster stack

#Ensure the boundary is in the same CRS as the raster stack
if (crs(raster_stack) != st_crs(erie_county)) {
  erie_county <- st_transform(erie_county, crs(raster_stack))  # Reproject the Erie County shapefile to match the raster CRS
}

# Convert the Erie County boundary shapefile to a 'SpatVector' for raster operations
erie_boundary_vect <- vect(erie_county)  # Convert sf object to SpatVector for raster operations

#Crop the raster stack using the Erie County boundary
raster_cropped <- crop(raster_stack, erie_boundary_vect)  # Crop the raster stack to the Erie County boundary
```

## Visualize data and display plots

```{r}
#Plot the cropped raster (first 12 bands)
plot(raster_cropped[[1:12]], main = "First 12 Bands of the Cropped Raster")  # Plot the first 12 bands of the cropped raster stack

#Compute the mean temperature across the first 12 bands of the raster stack
temperature_stack <- raster_cropped[[1:12]]  # Select the first 12 bands for temperature analysis
mean_temperature <- app(temperature_stack, fun = mean, na.rm = TRUE)  # Compute the mean value across the 12 bands, ignoring NAs

# Plot the mean temperature
plot(mean_temperature, main = "Mean Temperature (First 12 Bands)")  # Plot the mean temperature image

#Ensure the CRS of the mean temperature raster matches the Erie County shapefile
if (crs(mean_temperature) != st_crs(erie_county)) {
  erie_county <- st_transform(erie_county, crs(mean_temperature))  # Reproject Erie County to match the CRS of the mean temperature raster
}

```

## Display temperature intensity from the cropped file (raster_cropped)

```{r}
# Plot temperature intensity using color intensity from raster_cropped

# Plot the raster stack with linear stretch
plotRGB(raster_stack, stretch = "lin")  
# This will plot the RGB composite of the raster stack using a linear stretch. 
# Linear stretch adjusts the contrast of the image by linearly scaling the pixel values.

# Plot the cropped raster with linear stretch
plotRGB(raster_cropped, stretch = "lin")  
# This will plot the RGB composite of the cropped raster using a linear stretch.
# The cropped raster is focused on the region of interest (Erie County), and the stretch adjusts its contrast.

# Plot the raster stack with histogram equalization stretch
plotRGB(raster_stack, stretch = "hist")  
# This will plot the RGB composite of the raster stack using histogram equalization stretch.
# Histogram equalization adjusts the contrast by redistributing pixel values to cover the full range of the image's histogram.

# Plot the cropped raster with histogram equalization stretch
plotRGB(raster_cropped, stretch = "hist")  
# This will plot the RGB composite of the cropped raster using histogram equalization.
# Histogram equalization often improves contrast, especially in cases where the data has a skewed distribution.
plotRGB(raster_cropped, stretch="hist") # Histogram equalization stretch
```

## Display mean plot

```{r}
# Define a color palette for the temperature plot
temperature_palette <- terrain.colors(100)  
# This creates a color palette using `terrain.colors()`, which is a built-in R function that generates a palette
# suitable for representing temperature, ranging from cool to warm colors. The argument `100` specifies 
# the number of colors in the palette.

# Plot the mean temperature with the Erie County boundary overlay
plot(mean_temperature, col = temperature_palette, 
     main = "Mean Surface Temperature in Erie County, NY")  
# This line will plot the mean temperature raster using the defined color palette.
# The `col = temperature_palette` argument applies the temperature color palette to the plot.
# The `main` argument sets the title of the plot to "Mean Surface Temperature in Erie County, NY".

```

## Analysis (establishing patterns from the data-hotspot analysis using the mean_temperature)

```{r}
# Perform hotspot analysis based on the 90th percentile of temperature values

# Calculate the 90th percentile of the temperature values
temperature_values <- values(mean_temperature)  # Extract the temperature values from the raster
percentile_90 <- quantile(temperature_values, 0.90, na.rm = TRUE)  
# `quantile()` computes the specified percentile (90th percentile in this case) of the temperature values.
# `na.rm = TRUE` ensures that missing values (NA) are ignored during the computation.

# Create a binary hotspot layer
# The hotspot layer will contain 1 for pixels with temperature values greater than or equal to the 90th percentile
# and 0 for pixels with temperature values below the 90th percentile.
hotspot_layer <- mean_temperature >= percentile_90

# Plot the hotspot layer
plot(hotspot_layer, main = "Surface Temperature Hotspots in Erie County") 
#Interpretation
# The `plot()` function will visualize the binary hotspot layer.
# Hotspots (pixels above the 90th percentile) will be displayed in one color (typically 1 = TRUE, Yellow),
# while other areas will be displayed in another color (0 = FALSE, violet).

```

## Using specific bands [4, 5, 6, and 10] to calculate LST, NDVI, NDBI, and UHRI

```{r}
# Crop the raster stack using the Erie County boundary
raster_cropped <- crop(raster_stack, erie_boundary_vect)  
# This step crops the raster stack to the extent of the Erie County boundary using the `crop()` function.
# `erie_boundary_vect` is the vector representing the boundary of Erie County.

# Extract required bands for indices
red <- raster_cropped[[4]]     # Band 4: Red
nir <- raster_cropped[[5]]     # Band 5: Near-Infrared (NIR)
swir1 <- raster_cropped[[6]]   # Band 6: Shortwave Infrared 1 (SWIR1)
tir <- raster_cropped[[10]]    # Band 10: Thermal Infrared (TIR)

# Step 1: Calculate NDVI (Normalized Difference Vegetation Index)
ndvi <- (nir - red) / (nir + red)  
# NDVI is a commonly used index to assess vegetation health and density. It uses the difference between
# the near-infrared (NIR) and red bands, normalized by the sum of these bands. NDVI values range from -1 to 1,
# with higher values indicating healthier vegetation.

#Calculate NDBI (Normalized Difference Built-up Index)
ndbi <- (swir1 - nir) / (swir1 + nir)  
# NDBI is an index used to assess the presence of built-up areas. It uses the shortwave infrared (SWIR1) and
# near-infrared (NIR) bands. Higher values typically indicate urban or built-up areas.

#Calculate Land Surface Temperature (LST)
radiance <- tir * 0.0003342 + 0.1  
# Convert the thermal infrared (TIR) band to radiance using the formula provided in the metadata of the Landsat data, constants (0.0003342 and 0.1) 

kelvin_temp <- 1321.08 / log((774.89 / radiance) + 1)  
# Convert the radiance to temperature in Kelvin using the formula for Landsat 8 TIRS band. The constants from the metadata include (1321.08 and 774.89) 

lst <- kelvin_temp - 273.15  
# Convert the temperature from Kelvin to Celsius by subtracting 273.15. LST is commonly represented in Celsius.

#Calculate Urban Heat Risk Index (UHRI)
uhri <- (lst + ndbi) - ndvi  
# UHRI is a composite index that combines the Land Surface Temperature (LST), the Normalized Difference Built-up Index (NDBI), 
# and the Normalized Difference Vegetation Index (NDVI). It is used to calculate urban heat risk, where higher values indicate 
# areas with higher temperatures and less vegetation (urban heat islands).

```




## Using the calculated estimates of LST, NDVI, NDBI, and UHRI to visualize the spatial plots

```{r}
# Set up the 2x2 plot layout
par(mfrow = c(2, 2))  
# The `par(mfrow = c(2, 2))` function sets up a 2x2 grid of plots, so four plots will be displayed 
# in a 2-row by 2-column layout in the output.

# Define bright color palettes for each index
ndvi_palette <- colorRampPalette(c("red", "yellow", "green"))(100)  
# This creates a palette from red to green (with yellow in the middle) for NDVI. The `100` specifies
# that the palette will consist of 100 discrete colors. Red represents low vegetation, green represents 
# high vegetation.

ndbi_palette <- colorRampPalette(c("brown", "yellow", "blue"))(100)  
# This creates a palette from brwon to blue, with yellow in the middle, for NDBI. Higher values of NDBI
# are typically associated with built-up areas, which are represented in blue/black, while lower values
# are associated with natural areas, represented by white.

lst_palette <- colorRampPalette(c("blue", "orange", "red"))(100)  
# This creates a palette from blue to red with blue in the middle, for LST. blue represents cooler 
# temperatures, yellow represents moderate temperatures, and red represents higher temperatures.

uhri_palette <- colorRampPalette(c("royalblue", "orange", "red"))(100)  
# risk areas (often associated with high temperatures, low vegetation, and urbanization).

# Plot NDVI with bright colors
plot(ndvi, main = "NDVI", col = ndvi_palette, legend = TRUE)  
# This line plots the NDVI index with the defined color palette, and the `legend = TRUE` argument adds a
# legend to the plot for reference. NDVI values range from -1 (non-vegetated) to 1 (dense vegetation).

# Plot NDBI with bright colors
plot(ndbi, main = "NDBI", col = ndbi_palette, legend = TRUE)  
# This line plots the NDBI index using the `ndbi_palette`. NDBI values typically range from -1 (natural areas) 
# to 1 (built-up areas).

# Plot LST with bright colors
plot(lst, main = "LST (°C)", col = lst_palette, legend = TRUE)  
# This line plots the LST (Land Surface Temperature) index with the `lst_palette`. The LST values represent
# the land surface temperature in degrees Celsius, with cooler areas shown in blue, moderate areas in yellow,
# and hotter areas in red.

# Plot UHRI with bright colors
plot(uhri, main = "UHRI", col = uhri_palette, legend = TRUE)  
# This line plots the Urban Heat Risk Index (UHRI) with the `uhri_palette`. UHRI combines temperature, 
# built-up areas, and vegetation, with higher values indicating higher heat risk (represented in red).

```

## Establish association between NDVI, NDBI, and LST

```{r}
# Load the corrplot package for creating a correlation matrix plot
library(corrplot)

# Flatten the raster values into numeric vectors for each index
ndvi_flat <- as.numeric(values(ndvi))  # Convert NDVI raster values into a numeric vector
ndbi_flat <- as.numeric(values(ndbi))  # Convert NDBI raster values into a numeric vector
lst_flat <- as.numeric(values(lst))    # Convert LST raster values into a numeric vector

# Combine the individual flattened vectors into a data frame for analysis
# This creates a data frame with one column for each index (NDVI, NDBI, LST)
data <- data.frame(NDVI = ndvi_flat, NDBI = ndbi_flat, LST = lst_flat)

# Calculate the correlation matrix for the three indices (NDVI, NDBI, and LST)
# Use "complete.obs" to exclude any rows with missing (NA) values in the calculation
correlation_matrix <- cor(data, use = "complete.obs")

# Print the calculated correlation matrix to the console for review
print(correlation_matrix)

# Create and display a correlation plot of the matrix using the corrplot package
# The corrplot() function visualizes the correlation matrix with color-coded cells
corr_plot <- corrplot(correlation_matrix, 
                      method = "color",  # Use color to represent correlation values
                      col = colorRampPalette(c("blue", "white", "red"))(200),  # Define a color scale: blue for negative, red for positive correlations
                      tl.col = "black",   # Set the color of the text labels (axis labels) to black for readability
                      tl.srt = 45,         # Rotate axis labels by 45 degrees to avoid overlap and improve readability
                      addCoef.col = "black",  # Add correlation coefficient numbers to each cell in black
                      number.cex = 0.7,    # Adjust the size of the numbers showing the correlation coefficients
                      cl.cex = 0.7,        # Adjust the size of the color legend text
                      main = "Correlation Matrix of NDVI, NDBI, and LST")  # Set the title for the plot

# Display the correlation plot
corr_plot

#the correlation coefficients maybe influenced by the lake Erie
```

## Prepare census data for socio-demographic characteristics

```{r}
# Set your Census API key
census_api_key("677c6e6ec5f3c8621d7b139013d29cb61cf4dcdd", install = TRUE, overwrite = TRUE)

# Define the variables for race, age, and income
race_vars <- c(
  "Total Population" = "P1_001N",
  "White alone" = "P1_003N",
  "Black or African American alone" = "P1_004N",
  "American Indian and Alaska Native alone" = "P1_005N",
  "Asian alone" = "P1_006N",
  "Native Hawaiian and Other Pacific Islander alone" = "P1_007N",
  "Some Other Race alone" = "P1_008N",
  "Two or More Races" = "P1_009N"
)

age_vars <- c(
  "Total Population" = "P1_001N",
  "Under 5 years" = "P1_003N",
  "5 to 9 years" = "P1_004N",
  "10 to 14 years" = "P1_005N",
  "15 to 19 years" = "P1_006N",
  "20 to 24 years" = "P1_007N",
  "25 to 34 years" = "P1_008N",
  "35 to 44 years" = "P1_009N",
  "45 to 54 years" = "P1_010N",
  "55 to 64 years" = "P1_011N",
  "65 to 74 years" = "P1_012N",
  "75 to 84 years" = "P1_013N",
  "85 years and over" = "P1_014N"
)

income_vars <- c(
  "Total Households" = "B19001_001",
  "Less than $10,000" = "B19001_002",
  "$10,000 to $14,999" = "B19001_003",
  "$15,000 to $19,999" = "B19001_004",
  "$20,000 to $24,999" = "B19001_005",
  "$25,000 to $29,999" = "B19001_006",
  "$30,000 to $34,999" = "B19001_007",
  "$35,000 to $39,999" = "B19001_008",
  "$40,000 to $44,999" = "B19001_009",
  "$45,000 to $49,999" = "B19001_010",
  "$50,000 to $59,999" = "B19001_011",
  "$60,000 to $74,999" = "B19001_012",
  "$75,000 to $99,999" = "B19001_013",
  "$100,000 to $124,999" = "B19001_014",
  "$125,000 to $149,999" = "B19001_015",
  "$150,000 to $199,999" = "B19001_016",
  "$200,000 or more" = "B19001_017"
)

# Download the data
race_data <- get_decennial(geography = "block group", variables = race_vars, year = 2020, state = "NY", county = "Erie", geometry = TRUE)
age_data <- get_decennial(geography = "block group", variables = age_vars, year = 2020, state = "NY", county = "Erie", geometry = TRUE)
income_data <- get_acs(geography = "block group", variables = income_vars, year = 2020, state = "NY", county = "Erie", geometry = TRUE)
```

## Join census data and shapefiles

```{r}

# Check the CRS of the Erie County shapefile and age data
st_crs(erie_county)  # CRS of the Erie County shapefile
st_crs(age_data)     # CRS of the age data

# If CRS do not match, transform 'age_data' to match the CRS of the Erie County shapefile
if (st_crs(erie_county) != st_crs(age_data)) {
  age_data <- st_transform(age_data, st_crs(erie_county))
}

# Perform the spatial join
age_merged <- st_join(erie_county, age_data, join = st_intersects)
```



## Analysis (overlay age on NDVI, NDBI, LST, and UHRI) for intersectionality (obj3)
```{r}
# Define a color palette for the age data (assuming 'age_merged' has a numeric age variable)
age_palette <- colorRampPalette(c("lightblue", "blue", "darkblue"))(100)

# Define color palettes
ndvi_palette <- colorRampPalette(c("red", "yellow", "green"))(100)
ndbi_palette <- colorRampPalette(c("brown", "yellow", "blue"))(100)
lst_palette <- colorRampPalette(c("blue", "orange", "red"))(100)
uhri_palette <- colorRampPalette(c("royalblue", "orange", "red"))(100)

# Ensure the CRS of `age_merged` and raster layers match (if not, transform `age_merged`)
# Check CRS of age_merged
st_crs(age_merged)  # This should match the CRS of your rasters

# If CRS is different, transform age_merged to match the raster CRS
age_merged <- st_transform(age_merged, crs = crs(ndvi))  # Replace `ndvi` with your raster object

# Set up a 2x2 plot layout
par(mfrow = c(2, 2))

# Plot NDVI with bright colors
plot(ndvi, main = "NDVI", col = ndvi_palette, legend = TRUE)
plot(age_merged$geometry, add = TRUE, col = age_palette, border = "white")  # Overlay age_merged polygons

# Plot NDBI with bright colors
plot(ndbi, main = "NDBI", col = ndbi_palette, legend = TRUE)
plot(age_merged$geometry, add = TRUE, col = age_palette, border = "white")  # Overlay age_merged polygons

# Plot LST with bright colors
plot(lst, main = "LST (°C)", col = lst_palette, legend = TRUE)
plot(age_merged$geometry, add = TRUE, col = age_palette, border = "white")  # Overlay age_merged polygons

```

# 3.0 Results

The results from the plots reveal contrasting patterns between vegetation and urbanization. Vegetation areas are represented by NDVI values ranging from -1 to 1, with low vegetation in red, moderate vegetation in yellow, and high vegetation in green. In contrast, urbanized areas are represented by NDBI values, which range from brown (low urbanization) to blue (high urbanization). The results empirically illustrate that areas with low to moderate vegetation and high levels of urbanization (as indicated by higher NDBI values) are most likely hotspots for the urban heat effect (UHE). This is due to the dense population and limited vegetation in these areas, which leads to higher land surface temperatures.

To effectively mitigate the urban heat effect and enhance carbon capture, it is essential to prioritize interventions that increase green infrastructure. Expanding vegetation in urban areas can help reduce the impacts of UHE by cooling the environment.

The land surface temperature (LST) maps further confirm this pattern of heat accumulation, with hotter areas (shown in red) strongly correlating with densely built-up urban zones. The Urban Heat Risk Index (UHRI), which combines temperature, built-up areas, and vegetation, also highlights regions at high risk of extreme heat. Areas with high UHRI values, shown in red, are particularly vulnerable to extreme heat, reflecting a direct relationship between high temperatures, urbanization, and low vegetation cover. These findings are crucial for identifying and prioritizing areas for mitigation strategies. Targeting these areas in urban climate action planning is essential to reduce the impacts of heatwaves, particularly on vulnerable socio-economic groups.

Additionally, overlaying socio-demographic data (specifically age) with the environmental indices (NDVI, NDBI, LST, and UHRI) reveals likely disparities in heat vulnerability. This underscores the intersectional nature of heat risk, where socio-economic factors such as race and income can amplify exposure to extreme heat. Vulnerable populations, such as low-income and minority communities, are disproportionately affected by UHE, highlighting the need for equitable climate action that addresses both environmental and social inequalities. 


```{r, fig.width=6, fig.height=3, fig.cap="Map of completely random data"}

# Define a function to downsample the raster
downsample_raster <- function(raster_data, factor = 2) {
  # Use the aggregate function to downsample the raster by the factor
  # The "fact" parameter reduces the resolution by the specified factor
  resampled_raster <- aggregate(raster_data, fact = factor, fun = mean)
  return(resampled_raster)
}

# Example downsampling of your raster layers (adjust factor as necessary)
ndvi_resampled <- downsample_raster(ndvi, factor = 4)  # Downsampling by a factor of 4
ndbi_resampled <- downsample_raster(ndbi, factor = 4)
lst_resampled <- downsample_raster(lst, factor = 4)
uhri_resampled <- downsample_raster(uhri, factor = 4)


# Check size of the resampled raster
object.size(ndvi_resampled)
object.size(ndbi_resampled)
object.size(lst_resampled)
object.size(uhri_resampled)


# Create the Leaflet map with downsampled rasters
map <- leaflet() %>%
  addTiles()  # Add OpenStreetMap basemap

# Add each resampled raster to the map
map <- map %>%
  addRasterImage(ndvi_resampled, colors = ndvi_palette, opacity = 0.6, group = "NDVI") %>%
  addRasterImage(ndbi_resampled, colors = ndbi_palette, opacity = 0.6, group = "NDBI") %>%
  addRasterImage(lst_resampled, colors = lst_palette, opacity = 0.6, group = "LST") %>%
  addRasterImage(uhri_resampled, colors = uhri_palette, opacity = 0.6, group = "UHRI")

# Add the polygons (age_merged) with a color based on age data
map <- map %>%
  addPolygons(data = age_merged, color = ~age_palette[age_merged$age], 
              weight = 1, fillOpacity = 0.5, group = "Age Polygons") 

# Add Layers Control to toggle visibility of layers
map <- map %>%
  addLayersControl(
    overlayGroups = c("NDVI", "NDBI", "LST", "UHRI", "Age Polygons"),
    options = layersControlOptions(collapsed = FALSE)
  )

# Display the map
map


```


# 4.0 Conclusions

The study provides an understanding of the spatial patterns of urban heat risk and the intersectional vulnerabilities of different communities in Erie County. The study used Landsat 8 Collection 2 level 1 remote sensing data coupled with spatial data analysis to establish patterns using environmental indies (NDBI, NDVI, LST, and UHRI). These findings shows:
Areas with high urbanization and low vegetation (high NDBI and low NDVI) are at the highest risk of extreme heat.
The Urban Heat Risk Index (UHRI) clearly identifies hotspots where mitigation efforts should be concentrated.
Vulnerable populations, particularly those in low-income and minority communities, are disproportionately affected by the Urban Heat Effect, necessitating targeted climate action planning for environmental and climate justice.
In conclusion, the study provides pointers to areas essential for designing effective strategies to reduce the impacts of extreme heat and ensure equitable access to cooling and green infrastructure across all communities.

Future Research: 
Future work should explore the spatial relationships between urban heat risk and vulnerable social groups (e.g., race, age, income) across different temporal scales, such as through time series analysis.


# 5.0 References

Mitchell, B. C., & Chakraborty, J. (2014). Urban heat and climate justice: a landscape of thermal inequity in Pinellas County, Florida. Geographical Review, 104(4), 459-480. <https://doi.org/10.1111/j.1931-0846.2014.12039.x>

United Nations Department of Economic and Social Affairs (UNDESA) (2018). World Urbanization Prospects—Population Division: The 2018 Revision.

Li, X., Zhou, Y., Yu, S., Jia, G., Li, H., & Li, W. (2019). Urban heat island impacts on building energy consumption: A review of approaches and findings. Energy, 174, 407-419. <https://doi.org/10.1016/j.energy.2019.02.183>

Wilby, R. L. (2008). Constructing climate change scenarios of urban heat island intensity and air quality. Environment and Planning B: Planning and Design, 35(5), 902-919. <https://doi.org/10.1068/b33066t>

Jung, M. W., Haddad, M. A., & Gelder, B. K. (2024). Examining heat inequity in a Brazilian metropolitan region. Environment and Planning B: Urban Analytics and City Science, 51(1), 109-127. <https://doi.org/10.1177/23998083231170634>

Chen, P. (2024). Inequality in heat: The role of spatial patterns of urban green infrastructure. Urban Climate, 53, 101820. <https://doi.org/10.1016/j.uclim.2024.101820>

Heck, S. (2021). Greening the color line: Historicizing water infrastructure redevelopment and environmental justice in the St. Louis metropolitan region. Journal of Environmental Policy & Planning, 23(5), 565-580. <https://doi.org/10.1080/1523908X.2021.1888702> 

